//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /home/zach/Documents/Stanford/classes/ee272/garnet/pe_core/genesis/test_full_add.svp
//  Source template: test_full_add
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// dual (_GENESIS2_DECLARATION_PRIORITY_) = 0
//
module test_full_add  #(
  parameter DataWidth = 16,
  parameter Segs      = 4,
  parameter SegWidth  = 4
) (

  input  [DataWidth-1:0]        a,
  input  [DataWidth-1:0]        b,
  input                         c_in,

  input  						is_vec,

  output logic [DataWidth-1:0]  res,
  output logic [Segs-1:0]    c_out
);

logic [Segs-1:0] carries_in;
logic [Segs-1:0] c_out_full;

assign c_out = is_vec ? c_out_full : {c_out_full[Segs-1], {(Segs-1){1'b0}}};

assign carries_in[0] = c_in;

genvar vec_el;

generate
	for(vec_el=0; vec_el<Segs; vec_el=vec_el + 1) begin: GEN_VEC_ADD
		if(vec_el != Segs - 1) begin
			assign carries_in[vec_el + 1] = is_vec ? c_in : c_out_full[vec_el];
		end
		assign {c_out_full[vec_el], res[((vec_el + 1)*SegWidth) - 1 : (vec_el*SegWidth)]} = 
					a[((vec_el + 1)*SegWidth) - 1 : (vec_el*SegWidth)] + b[((vec_el + 1)*SegWidth) - 1 : (vec_el*SegWidth)] + carries_in[vec_el];
	end

endgenerate

endmodule

